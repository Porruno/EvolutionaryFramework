/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import geneticAlgorithm.chart.EvaluationsNumberFormatter;
import java.awt.GridBagConstraints;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYIntervalSeries;
import org.jfree.data.xy.XYIntervalSeriesCollection;

/**
 *
 * @author Lay
 */
public class GroupOfTestsChart extends javax.swing.JFrame {

    public double percentageOfPoints = 1;
    public String chartTitle;
    public TestResult[] testResults;
    public int evaluationsPerGeneration;
    public ChartPanel chartPanel = null;

    public GroupOfTestsChart(String chartTitle, TestResult[] testResults, int evaluationsPerGeneration) {
        super("Report");
        initComponents();
        this.chartTitle = chartTitle;
        this.testResults = testResults;
        this.evaluationsPerGeneration = evaluationsPerGeneration;
        render();
        pack();
        this.setVisible(true);
    }
    
    public double ticks(int originalPoints){
        return originalPoints * percentageOfPoints;
    }
    
    public double[] propertyToEvaluate(int i){
        if(this.propertyCB.getSelectedIndex() == 0){
            return testResults[i].averageBest;
        }
        return null;
    }
    
    private void render(){
        this.invalidate();
        XYDataset dataset = createDataset(testResults);
        
        GridBagConstraints c = new GridBagConstraints();
        c.gridx = 0;
        c.gridy = 2;
        c.gridwidth = GridBagConstraints.REMAINDER;
        c.gridheight = GridBagConstraints.REMAINDER;
        c.fill = GridBagConstraints.BOTH;
        c.weightx = 1;
        c.weighty = 1;
        JFreeChart chart = createChart(dataset, evaluationsPerGeneration);
        if(chartPanel != null){
            getContentPane().remove(chartPanel);
        }
        chartPanel = new ChartPanel(chart);
        getContentPane().add(chartPanel, c);
        this.validate();
    }

    private JFreeChart createChart(XYDataset dataset, int evaluationsPerGeneration) {
        JFreeChart chart = ChartFactory.createXYLineChart(
                "Report", "Evaluations", "Aptitude", dataset, PlotOrientation.VERTICAL, true, true, false);
        XYPlot plot = (XYPlot) chart.getPlot();
        XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
        for (int i = 0; i < dataset.getSeriesCount(); i++) {
            renderer.setSeriesShapesVisible(i, true);
        }
        plot.setRenderer(renderer);
        NumberAxis nA = (NumberAxis) plot.getDomainAxis();
        double[] propertyToEvaluate = this.propertyToEvaluate(0);
        
        double evaluationsPerTick = (double) evaluationsPerGeneration * this.propertyToEvaluate(0).length / this.ticks(propertyToEvaluate.length);
        
        
        nA.setNumberFormatOverride(new EvaluationsNumberFormatter(evaluationsPerTick));

        return chart;
    }

    private XYDataset createDataset(TestResult[] testResults) {
        XYIntervalSeriesCollection dataset = new XYIntervalSeriesCollection();
        int j = 0;
        for (TestResult testResult : testResults) {
            XYIntervalSeries averageSerie = new XYIntervalSeries(testResult.testName);
            double[] propertyToGraph = this.propertyToEvaluate(j);
            j++;
            double numberOfPoints = this.ticks(propertyToGraph.length);
            double skipSize = propertyToGraph.length / numberOfPoints;
            for (int i = 0; i < numberOfPoints; i++) {
                double value = propertyToGraph[(int) (i * skipSize)];
                averageSerie.add(i, i, i, value, value, value);
            }
            dataset.addSeries(averageSerie);
        }
        return dataset;
    }
    
    @Override
    public void setSize(int i, int i2){
        super.setSize(i, i2);
        this.invalidate();
        this.validate();
    }

    /**
     * Creates new form GroupOfTestsChart
     */
    public GroupOfTestsChart() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        interval_Sldr = new javax.swing.JSlider();
        render_btn = new javax.swing.JButton();
        propertyCB = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        interval_Sldr.setValue(100);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        getContentPane().add(interval_Sldr, gridBagConstraints);

        render_btn.setText("Render");
        render_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                render_btnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 1, 1);
        getContentPane().add(render_btn, gridBagConstraints);

        propertyCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Best", "Average" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(7, 6, 1, 1);
        getContentPane().add(propertyCB, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void render_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_render_btnActionPerformed

        this.percentageOfPoints = (double)this.interval_Sldr.getValue() / this.interval_Sldr.getMaximum();
        this.render();
    }//GEN-LAST:event_render_btnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider interval_Sldr;
    private javax.swing.JComboBox propertyCB;
    private javax.swing.JButton render_btn;
    // End of variables declaration//GEN-END:variables
}
