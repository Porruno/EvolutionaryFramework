package grammar.adf;

import geneticAlgorithm.PopulationDelegate;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * This delgate contains needed parameters to create an ADF. When it's referred
 * to "this delegate's ADF" in this document, it's been referred to the ADF that
 * will be created passing this delegate in the ADF's constructor method.
 * @author Jesús Irais González Romero
 */
public class ADFDelegate {

    public PopulationDelegate populationDelegate;
    public Class<?>[] parameterTypes = null;
    private ADFType adfType;
    
    /**
     * Defines the type of an ADF.
     */
    public enum ADFType {
        SIMPLE, SEMICOEVOLUTIVE, COEVOLUTIVE
    }
    
    /**
     * Constructor method for an ADFDelegate.
     * @param adfType The type of this delegate's ADF.
     */
    public ADFDelegate(ADFType adfType, PopulationDelegate populationDelegate){
        this.adfType = adfType;
        this.populationDelegate = populationDelegate;
    }

    /**
     * @return The class (defined by the user) that this delegate's ADF will use.
     */
    public Class<?> getADFInputClass() {
        return this.getPopulationDelegate().getInputClass();
    }

    /**
     * 
     * @return An array with the classes of the parameters that all the genomes of the
     * population of the ADF generated by this delegate uses.
     */
    public Class<?>[] getParameterTypes() {
        try {
            if (parameterTypes != null) {
                return parameterTypes;
            }
            ADFInput adfInputMock;
            Constructor<?> constructor = this.getADFInputClass().getConstructor();
            adfInputMock = (ADFInput) constructor.newInstance();
            this.parameterTypes = adfInputMock.getParameterTypes();
            return this.parameterTypes;
        } catch (InstantiationException ex) {
            Logger.getLogger(ADFDelegate.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(ADFDelegate.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(ADFDelegate.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(ADFDelegate.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(ADFDelegate.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SecurityException ex) {
            Logger.getLogger(ADFDelegate.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    /**
     * @return The type of this delegate's ADF (Simple, Semi-Coevolutive,
     * Coevolutive).
     */
    public ADFType getADFType(){
        return this.adfType;
    }

    /**
     * @return The population delegate needed to create the
     * population of this delegate's ADF.
     */
    public PopulationDelegate getPopulationDelegate() {
        return this.populationDelegate;
    }
}